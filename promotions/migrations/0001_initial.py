# Generated by Django 5.2.3 on 2025-07-11 06:09

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('orders', '0001_initial'),
        ('restaurants', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='LoyaltyProgram',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('points_per_dollar', models.DecimalField(decimal_places=2, default=1, max_digits=5)),
                ('points_redemption_value', models.DecimalField(decimal_places=4, default=0.01, max_digits=5)),
                ('bronze_tier_threshold', models.IntegerField(default=0)),
                ('silver_tier_threshold', models.IntegerField(default=500)),
                ('gold_tier_threshold', models.IntegerField(default=1000)),
                ('platinum_tier_threshold', models.IntegerField(default=2000)),
                ('is_active', models.BooleanField(default=True)),
                ('points_expiry_days', models.IntegerField(blank=True, help_text='Days after which points expire', null=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CustomerLoyaltyAccount',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('total_points_earned', models.IntegerField(default=0)),
                ('total_points_redeemed', models.IntegerField(default=0)),
                ('current_points_balance', models.IntegerField(default=0)),
                ('current_tier', models.CharField(choices=[('BRONZE', 'Bronze'), ('SILVER', 'Silver'), ('GOLD', 'Gold'), ('PLATINUM', 'Platinum')], default='BRONZE', max_length=10)),
                ('tier_progress', models.IntegerField(default=0, help_text='Points towards next tier')),
                ('total_orders', models.IntegerField(default=0)),
                ('total_spent', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='loyalty_account', to=settings.AUTH_USER_MODEL)),
                ('loyalty_program', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customer_accounts', to='promotions.loyaltyprogram')),
            ],
            options={
                'ordering': ['-total_points_earned'],
            },
        ),
        migrations.CreateModel(
            name='Promotion',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=50, unique=True)),
                ('description', models.TextField(blank=True)),
                ('promotion_type', models.CharField(choices=[('PERCENTAGE', 'Percentage Discount'), ('FIXED_AMOUNT', 'Fixed Amount Discount'), ('FREE_DELIVERY', 'Free Delivery'), ('BOGO', 'Buy One Get One'), ('MINIMUM_ORDER', 'Minimum Order Discount')], max_length=20)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('ACTIVE', 'Active'), ('PAUSED', 'Paused'), ('EXPIRED', 'Expired'), ('DISABLED', 'Disabled')], default='DRAFT', max_length=10)),
                ('discount_percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('discount_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('minimum_order_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('maximum_discount_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('usage_limit', models.IntegerField(blank=True, help_text='Total number of times this promotion can be used', null=True)),
                ('usage_limit_per_user', models.IntegerField(blank=True, help_text='Number of times each user can use this promotion', null=True)),
                ('current_usage_count', models.IntegerField(default=0)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('applicable_to_new_users_only', models.BooleanField(default=False)),
                ('applicable_menu_items', models.ManyToManyField(blank=True, to='restaurants.menuitem')),
                ('applicable_restaurants', models.ManyToManyField(blank=True, to='restaurants.restaurant')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LoyaltyTransaction',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('transaction_type', models.CharField(choices=[('EARNED', 'Points Earned'), ('REDEEMED', 'Points Redeemed'), ('EXPIRED', 'Points Expired'), ('BONUS', 'Bonus Points'), ('ADJUSTMENT', 'Manual Adjustment')], max_length=15)),
                ('points', models.IntegerField()),
                ('description', models.CharField(max_length=200)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
                ('loyalty_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='promotions.customerloyaltyaccount')),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='orders.order')),
                ('promotion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='promotions.promotion')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Campaign',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('campaign_type', models.CharField(choices=[('SEASONAL', 'Seasonal'), ('HOLIDAY', 'Holiday'), ('LAUNCH', 'New Launch'), ('RETENTION', 'Customer Retention'), ('ACQUISITION', 'Customer Acquisition'), ('PARTNERSHIP', 'Partnership')], max_length=20)),
                ('is_active', models.BooleanField(default=False)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('target_user_roles', models.CharField(blank=True, help_text='Comma-separated user roles', max_length=100)),
                ('target_cities', models.CharField(blank=True, help_text='Comma-separated city names', max_length=200)),
                ('budget', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('spent_amount', models.DecimalField(decimal_places=2, default=0, max_digits=12)),
                ('impressions', models.IntegerField(default=0)),
                ('clicks', models.IntegerField(default=0)),
                ('conversions', models.IntegerField(default=0)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('promotions', models.ManyToManyField(blank=True, related_name='campaigns', to='promotions.promotion')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PromotionUsage',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('discount_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('original_order_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('final_order_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='promotion_usages', to='orders.order')),
                ('promotion', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usages', to='promotions.promotion')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='promotion_usages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='customerloyaltyaccount',
            index=models.Index(fields=['user'], name='promotions__user_id_573000_idx'),
        ),
        migrations.AddIndex(
            model_name='customerloyaltyaccount',
            index=models.Index(fields=['current_tier'], name='promotions__current_00c504_idx'),
        ),
        migrations.AddIndex(
            model_name='promotion',
            index=models.Index(fields=['code'], name='promotions__code_e9f529_idx'),
        ),
        migrations.AddIndex(
            model_name='promotion',
            index=models.Index(fields=['status', 'start_date', 'end_date'], name='promotions__status_01e07b_idx'),
        ),
        migrations.AddIndex(
            model_name='promotion',
            index=models.Index(fields=['promotion_type'], name='promotions__promoti_f59ec4_idx'),
        ),
        migrations.AddIndex(
            model_name='loyaltytransaction',
            index=models.Index(fields=['loyalty_account', 'transaction_type'], name='promotions__loyalty_2dec55_idx'),
        ),
        migrations.AddIndex(
            model_name='loyaltytransaction',
            index=models.Index(fields=['transaction_type', 'created_at'], name='promotions__transac_009a8b_idx'),
        ),
        migrations.AddIndex(
            model_name='campaign',
            index=models.Index(fields=['campaign_type', 'is_active'], name='promotions__campaig_a162ce_idx'),
        ),
        migrations.AddIndex(
            model_name='campaign',
            index=models.Index(fields=['start_date', 'end_date'], name='promotions__start_d_22f35f_idx'),
        ),
        migrations.AddIndex(
            model_name='promotionusage',
            index=models.Index(fields=['promotion', 'user'], name='promotions__promoti_ac6da2_idx'),
        ),
        migrations.AddIndex(
            model_name='promotionusage',
            index=models.Index(fields=['user', 'created_at'], name='promotions__user_id_3949ef_idx'),
        ),
        migrations.AddIndex(
            model_name='promotionusage',
            index=models.Index(fields=['order'], name='promotions__order_i_f4a035_idx'),
        ),
    ]
