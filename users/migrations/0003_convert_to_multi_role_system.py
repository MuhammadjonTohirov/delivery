# Generated by Django 5.0.1 on 2025-06-07 15:16

from django.db import migrations, models


def migrate_roles_to_many_to_many(apps, schema_editor):
    """
    Convert existing single role field to many-to-many roles
    """
    CustomUser = apps.get_model('users', 'CustomUser')
    UserRole = apps.get_model('users', 'UserRole')
    
    # Create default roles
    role_data = [
        ('CUSTOMER', 'Customer', 'Customer who orders food'),
        ('DRIVER', 'Driver', 'Delivery driver'),
        ('RESTAURANT', 'Restaurant Owner', 'Restaurant owner/manager'),
        ('ADMIN', 'Administrator', 'System administrator'),
    ]
    
    for name, display_name, description in role_data:
        UserRole.objects.get_or_create(
            name=name,
            defaults={
                'display_name': display_name,
                'description': description,
                'is_active': True
            }
        )
    
    # Migrate existing user roles
    for user in CustomUser.objects.all():
        if hasattr(user, 'role') and user.role:
            try:
                role_obj = UserRole.objects.get(name=user.role)
                user.roles.add(role_obj)
            except UserRole.DoesNotExist:
                # If role doesn't exist, assign customer role as default
                customer_role = UserRole.objects.get(name='CUSTOMER')
                user.roles.add(customer_role)


def reverse_migrate_roles(apps, schema_editor):
    """
    Reverse migration - convert many-to-many back to single role
    """
    CustomUser = apps.get_model('users', 'CustomUser')
    
    for user in CustomUser.objects.all():
        # Set role to the first role the user has, or CUSTOMER as default
        first_role = user.roles.first()
        if first_role:
            user.role = first_role.name
        else:
            user.role = 'CUSTOMER'
        user.save()


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0002_customuser_avatar'),
    ]

    operations = [
        # First, create the UserRole model
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('CUSTOMER', 'Customer'), ('DRIVER', 'Driver'), ('RESTAURANT', 'Restaurant Owner'), ('ADMIN', 'Administrator')], max_length=15, unique=True, verbose_name='role name')),
                ('display_name', models.CharField(max_length=50, verbose_name='display name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'user role',
                'verbose_name_plural': 'user roles',
            },
        ),
        
        # Add the many-to-many field
        migrations.AddField(
            model_name='customuser',
            name='roles',
            field=models.ManyToManyField(blank=True, related_name='users', to='users.userrole', verbose_name='user roles'),
        ),
        
        # Migrate existing role data
        migrations.RunPython(
            migrate_roles_to_many_to_many,
            reverse_migrate_roles
        ),
        
        # Finally, remove the old role field
        migrations.RemoveField(
            model_name='customuser',
            name='role',
        ),
    ]
